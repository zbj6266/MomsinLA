{"version":3,"sources":["../../../src/@ionic-native/plugins/calendar/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAyDxE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH;IAA8B,4BAAiB;IAA/C;;IAkZA,CAAC;IAjZC;;;;;;;;;;OAUG;IAEH,yCAAsB,GAAtB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,oCAAiB,GAAjB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,qCAAkB,GAAlB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,yCAAsB,GAAtB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,wCAAqB,GAArB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,6CAA0B,GAA1B;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,iCAAc,GAAd,UAAe,aAAqC;QAClD,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,iCAAc,GAAd,UAAe,IAAY;QACzB,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,qCAAkB,GAAlB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,2CAAwB,GAAxB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;OAQG;IAEH,8BAAW,GAAX,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc;QAEd,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;OAUG;IAEH,yCAAsB,GAAtB,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc,EACd,OAAyB;QAEzB,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;OASG;IAEH,2CAAwB,GAAxB,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc;QAEd,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;OAUG;IAEH,sDAAmC,GAAnC,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc,EACd,OAAyB;QAEzB,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;OASG;IAEH,4BAAS,GAAT,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc;QAEd,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;OASG;IAEH,uCAAoB,GAApB,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc,EACd,OAAyB;QAEzB,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAIH,oCAAiB,GAAjB,UAAkB,SAAe,EAAE,OAAa;QAC9C,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,gCAAa,GAAb;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAIH,+CAA4B,GAA5B,UAA6B,YAAoB;QAC/C,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;;;;;OAcG;IAIH,8BAAW,GAAX,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc,EACd,QAAiB,EACjB,WAAoB,EACpB,QAAiB,EACjB,YAAmB,EACnB,UAAiB;QAEjB,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IAIH,yCAAsB,GAAtB,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc,EACd,QAAiB,EACjB,WAAoB,EACpB,QAAiB,EACjB,YAAmB,EACnB,UAAiB,EACjB,aAA+B,EAC/B,UAA4B;QAE5B,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;OASG;IAEH,8BAAW,GAAX,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc;QAEd,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;OAUG;IAIH,+CAA4B,GAA5B,UACE,KAAc,EACd,QAAiB,EACjB,KAAc,EACd,SAAgB,EAChB,OAAc,EACd,YAAqB;QAErB,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,+BAAY,GAAZ,UAAa,IAAU;QACrB,MAAM,CAAC;IACT,CAAC;IACI,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IApYA;QADC,OAAO,EAAE;;;;0DAGT;IAOD;QADC,OAAO,EAAE;;;;qDAGT;IAOD;QADC,OAAO,EAAE;;;;sDAGT;IAOD;QADC,OAAO,EAAE;;;;0DAGT;IAOD;QADC,OAAO,EAAE;;;;yDAGT;IAOD;QADC,OAAO,EAAE;;;;8DAGT;IASD;QADC,OAAO,EAAE;;;;kDAGT;IAQD;QADC,OAAO,EAAE;;;;kDAGT;IAUD;QAHC,OAAO,CAAC;YACP,IAAI,EAAE,IAAI;SACX,CAAC;;;;sDAGD;IAUD;QAHC,OAAO,CAAC;YACP,IAAI,EAAE,IAAI;SACX,CAAC;;;;4DAGD;IAYD;QADC,OAAO,EAAE;;iEAKI,IAAI;YACN,IAAI;;+CAGf;IAcD;QADC,OAAO,EAAE;;iEAKI,IAAI;YACN,IAAI;;0DAIf;IAaD;QADC,OAAO,EAAE;;iEAKI,IAAI;YACN,IAAI;;4DAGf;IAcD;QADC,OAAO,EAAE;;iEAKI,IAAI;YACN,IAAI;;uEAIf;IAaD;QADC,OAAO,EAAE;;iEAKI,IAAI;YACN,IAAI;;6CAGf;IAaD;QADC,OAAO,EAAE;;iEAKI,IAAI;YACN,IAAI;;wDAIf;IAYD;QAHC,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;;yCAC2B,IAAI,EAAW,IAAI;;qDAE/C;IAOD;QADC,OAAO,EAAE;;;;iDAGT;IASD;QAHC,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;;;gEAGD;IAoBD;QAHC,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;iEAKY,IAAI;YACN,IAAI,0BAIC,IAAI;YACN,IAAI;;+CAGlB;IAsBD;QAHC,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;iEAKY,IAAI;YACN,IAAI,0BAIC,IAAI;YACN,IAAI;;0DAKlB;IAaD;QADC,OAAO,EAAE;;iEAKI,IAAI;YACN,IAAI;;+CAGf;IAgBD;QAHC,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;iEAKY,IAAI;YACN,IAAI;;gEAIf;IAQD;QADC,OAAO,EAAE;;yCACS,IAAI;;gDAEtB;IA3YU,QAAQ;QARpB,MAAM,CAAC;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,yBAAyB;YACjC,SAAS,EAAE,kBAAkB;YAC7B,IAAI,EAAE,4DAA4D;YAClE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,QAAQ,CAkZpB;IAAD,eAAC;CAlZD,AAkZC,CAlZ6B,iBAAiB,GAkZ9C;SAlZY,QAAQ","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface CalendarOptions {\n  /**\n   * Id\n   */\n  id?: string;\n\n  /**\n   *\n   */\n  firstReminderMinutes?: number;\n\n  /**\n   *\n   */\n  secondReminderMinutes?: number;\n\n  /**\n   * Recurrence. Can be set to `daily`, `weekly`, `monthly` or `yearly`\n   */\n  recurrence?: string;\n\n  /**\n   * Recurrence interval. Valid only when `recurrence` option is set.\n   */\n  recurrenceInterval?: number;\n\n  /**\n   * Recurrence end date. Valid only when `recurrence` option is set.\n   */\n  recurrenceEndDate?: Date;\n\n  /**\n   * Calendar name. Ths is supported by `iOS` only.\n   */\n  calendarName?: string;\n\n  /**\n   * Calendar id\n   */\n  calendarId?: number;\n\n  /**\n   * URL\n   */\n  url?: string;\n}\n\nexport interface NameOrOptions {\n  /** Calendar name */\n  calendarName?: string;\n\n  /** Calendar color as a HEX string */\n  calendarColor?: string;\n}\n\n/**\n * @name Calendar\n * @description\n * This plugin allows you to add events to the Calendar of the mobile device.\n *\n * Requires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).\n *\n *\n * @usage\n * ```typescript\n * import { Calendar } from '@ionic-native/calendar';\n *\n * constructor(private calendar: Calendar) { }\n *\n *\n * this.calendar.createCalendar('MyCalendar').then(\n *   (msg) => { console.log(msg); },\n *   (err) => { console.log(err); }\n * );\n * ```\n * @interfaces\n * CalendarOptions\n * NameOrOptions\n */\n@Plugin({\n  pluginName: 'Calendar',\n  plugin: 'cordova-plugin-calendar',\n  pluginRef: 'plugins.calendar',\n  repo: 'https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Calendar extends IonicNativePlugin {\n  /**\n   * This function checks if we have permission to read/write from/to the calendar.\n   * The promise will resolve with `true` when:\n   * - You're running on iOS, or\n   * - You're targeting API level lower than 23, or\n   * - You're using Android < 6, or\n   * - You've already granted permission\n   *\n   * If this returns false, you should call the `requestReadWritePermission` function\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasReadWritePermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Check if we have read permission\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasReadPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Check if we have write permission\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  hasWritePermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request write permission\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  requestWritePermission(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Request read permission\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  requestReadPermission(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Requests read/write permissions\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  requestReadWritePermission(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Create a calendar. (iOS only)\n   *\n   * @param {string | NameOrOptions} nameOrOptions  either a string name or a options object. If string, provide the calendar name. IF an object, provide a calendar name as a string and a calendar color in hex format as a string\n   * @returns {Promise<any>} Returns a Promise\n   */\n  @Cordova()\n  createCalendar(nameOrOptions: string | NameOrOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete a calendar. (iOS only)\n   * @param {string} name  Name of the calendar to delete.\n   * @returns {Promise<any>} Returns a Promise\n   */\n  @Cordova()\n  deleteCalendar(name: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Returns the default calendar options.\n   *\n   * @return {CalendarOptions} Returns an object with the default calendar options\n   */\n  @Cordova({\n    sync: true\n  })\n  getCalendarOptions(): CalendarOptions {\n    return;\n  }\n\n  /**\n   * Returns options for a custom calender with specific color\n   *\n   * @return {NameOrOptions} Returns an object with the default options\n   */\n  @Cordova({\n    sync: true\n  })\n  getCreateCalendarOptions(): NameOrOptions {\n    return;\n  }\n\n  /**\n   * Silently create an event.\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @returns {Promise<any>} Returns a Promise\n   */\n  @Cordova()\n  createEvent(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Silently create an event with additional options.\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\n   * @returns {Promise<any>} Returns a Promise\n   */\n  @Cordova()\n  createEventWithOptions(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date,\n    options?: CalendarOptions\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Interactively create an event.\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @returns {Promise<any>} Returns a Promise\n   */\n  @Cordova()\n  createEventInteractively(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Interactively create an event with additional options.\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  createEventInteractivelyWithOptions(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date,\n    options?: CalendarOptions\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Find an event.\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  findEvent(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Find an event with additional options.\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\n   * @returns {Promise<any>} Returns a Promise that resolves with the event, or rejects with an error.\n   */\n  @Cordova()\n  findEventWithOptions(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date,\n    options?: CalendarOptions\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Find a list of events within the specified date range. (Android only)\n   *\n   * @param {Date} [startDate]  The start date\n   * @param {Date} [endDate]  The end date\n   * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  listEventsInRange(startDate: Date, endDate: Date): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get a list of all calendars.\n   * @returns {Promise<any>} A Promise that resolves with the list of calendars, or rejects with an error.\n   */\n  @Cordova()\n  listCalendars(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Get a list of all future events in the specified calendar. (iOS only)\n   * @returns {Promise<any>} Returns a Promise that resolves with the list of events, or rejects with an error.\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  findAllEventsInNamedCalendar(calendarName: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Modify an event. (iOS only)\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @param {string} [newTitle]  The new event title\n   * @param {string} [newLocation]  The new event location\n   * @param {string} [newNotes]  The new event notes\n   * @param {Date} [newStartDate]  The new event start date\n   * @param {Date} [newEndDate]  The new event end date\n   * @return Returns a Promise\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  modifyEvent(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date,\n    newTitle?: string,\n    newLocation?: string,\n    newNotes?: string,\n    newStartDate?: Date,\n    newEndDate?: Date\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Modify an event with additional options. (iOS only)\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @param {string} [newTitle]  The new event title\n   * @param {string} [newLocation]  The new event location\n   * @param {string} [newNotes]  The new event notes\n   * @param {Date} [newStartDate]  The new event start date\n   * @param {Date} [newEndDate]  The new event end date\n   * @param {CalendarOptions} [filterOptions] Event Options, see `getCalendarOptions`\n   * @param {CalendarOptions} [newOptions]  New event options, see `getCalendarOptions`\n   * @return Returns a Promise\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  modifyEventWithOptions(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date,\n    newTitle?: string,\n    newLocation?: string,\n    newNotes?: string,\n    newStartDate?: Date,\n    newEndDate?: Date,\n    filterOptions?: CalendarOptions,\n    newOptions?: CalendarOptions\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete an event.\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @return Returns a Promise\n   */\n  @Cordova()\n  deleteEvent(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete an event from the specified Calendar. (iOS only)\n   *\n   * @param {string} [title]  The event title\n   * @param {string} [location]  The event location\n   * @param {string} [notes]  The event notes\n   * @param {Date} [startDate]  The event start date\n   * @param {Date} [endDate]  The event end date\n   * @param {string} calendarName\n   * @return Returns a Promise\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  deleteEventFromNamedCalendar(\n    title?: string,\n    location?: string,\n    notes?: string,\n    startDate?: Date,\n    endDate?: Date,\n    calendarName?: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Open the calendar at the specified date.\n   * @param {Date} date The date you want to open the calendar on\n   * @return {Promise<any>} Promise returns a promise\n   */\n  @Cordova()\n  openCalendar(date: Date): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}